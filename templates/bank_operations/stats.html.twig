{% extends 'base.html.twig' %}

{% block body %}
	<div class="bg-light p-5 m-0 rounded">
		<h3 class="h3 text-dark">Expense & income</h3>

		<canvas id="myChart"></canvas>
	</div>
	<div class="bg-light p-5 mt-5 m-0 rounded">
		<h3 class="h3 text-dark">Statistics by year</h3>

		<canvas id="myChart2"></canvas>
	</div>

	<div class="bg-light p-5 mt-5 m-0 rounded">
		<h3 class="h3 text-dark">Statistics by categories</h3>
		<canvas id="myChart3"></canvas>
	</div>


	<script>
		catchData().then(response => console.log('All good, data fetched!')).catch(error => {
console.log(error);
})

async function catchData() {

const xLabelsDate = [];
const yOperationsPlus = [];
const yOperationsMinus = [];
const yOperations = [];
const yContent = [];
const yCategory = [];
const response = await fetch('/operationsJsonified');
const data = await response.json();
console.log(data);

data.forEach(operation => {
const amount = operation.amount;
yOperations.push(amount);
if (operation.amount > 0) {
const amountPlus = operation.amount

yOperationsPlus.push(amountPlus);

} else {
const amountMinus = operation.amount
yOperationsMinus.push(amountMinus);

}


const UNIXTimestamp = operation.date.timestamp;
date = new Date(UNIXTimestamp * 1000);
time = date.toDateString();
xLabelsDate.push(time);

const category = operation.category.title;
yCategory.push(category);
const content = operation.content;
yContent.push(content);


})
return {
yOperationsPlus,
yOperationsMinus,
yOperations,
xLabelsDate,
yCategory,
yContent
}
}


createChart();
createChart2();
createChart3();


async function createChart() { // call en await la function qui récupère les data et attend qu'elles soient récup
const data = await catchData();
const ctx = document.getElementById('myChart').getContext('2d');
const chart = new Chart(ctx, {
type: 'line',


data: {
labels: data.xLabelsDate,


datasets: [
{
label: "Positive amount",
fill: false,
borderColor: 'rgba(255, 0, 0, .7)',
data: data.yOperationsMinus

}, {
label: "Positive amount",
fill: false,
borderColor: 'rgba(50, 205, 50, .7)',
data: data.yOperationsPlus

}
]
},


options: {}
});
}

async function createChart2() { // call en await la function qui récupère les data et attend qu'elles soient récup
const data = await catchData();
const ctx = document.getElementById('myChart2').getContext('2d');
const chart = new Chart(ctx, {
type: 'radar',
data: {
labels: data.yCategory,


datasets: [
{
label: data.xLabelsDate,

backgroundColor: 'rgba(255, 255, 0, .7)',
data: data.yOperations

}
]
},


options: {}
});
}

async function createChart3() {
const data = await catchData();

const ctx = document.getElementById("myChart3").getContext('2d');
var myPieChart = new Chart(ctx, {
data: {
datasets: [
{
data: data.yOperationsMinus,
backgroundColor: [
'rgb(50, 205, 50)',
'rgb(255, 0, 0)',
'rgb(238,188,188)',
'rgb(238,222,171)',
'rgb(200,236,181)',
'rgb(188,194,242',
'rgb(232,182,238)'

]


}


],
labels: data.yCategory

},
type: 'doughnut'
});
}
	</script>
{% endblock %}
